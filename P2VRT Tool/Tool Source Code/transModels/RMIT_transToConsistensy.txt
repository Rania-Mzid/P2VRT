[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public generateElement(m : Model)]
[comment @main/]
[file (m.name, false, 'UTF-8')]
[generate_text_file(m)/]
[/file]
[/template]

[template public generate_text_file(m : Model)]
[comment @main/]
[file ('RMIT_verifConsistency.java',false)]
[for (comp:Component | m.eContents(Component))]
[for (str:Stereotype | comp.getAppliedStereotypes())]
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
/* ---------------------- Class Task ----------------------- */
class Task{
    private String name;
	private double wcet;
	private int jitter;
	private int priority;
	private int period;
	private int deadline;
	private String alloc;
	public Task(String name, double wcet, int jitter, int priority, int period, int deadline, String alloc){
	    this.name = name;
		this.wcet = wcet;
		this.jitter = jitter;
		this.priority = priority;
		this.period = period;
		this.deadline = deadline;
		this.alloc = alloc;
	}
	public String getName() {return this.name;}
	public double getWcet() {return this.wcet;}
	public int getJitter() {return this.jitter;}
	public int getPriority() {return this.priority;}
	public int getPeriod() {return this.period;}
	public int getDeadline() {return this.deadline;}
	public String getAlloc() {return this.alloc;}
}
/* -------------------- Class ComputationalModel -------------------- */
public class ComputationalModel{
	private int maxPriority;
    private int minPriority;
	private ArrayList<Task> tasks = new ArrayList<>();
	public ComputationalModel(int max, int min){
	    this.maxPriority = max;
	    this.minPriority = min;
	}
	public static void main(String ['[]'/]args){
		ComputationalModel cc = new ComputationalModel([comp.getValue(str,'maxPriority')/],[comp.getValue(str,'minPriority')/]);
		// Verify ComputationalModel //
		boolean test = false;
		boolean res = false;
		String msg = "For the ComputationalModel : ";
		if(cc.maxPriority==0) {
			msg = msg + "| maxPriority must be > 0 |";
			test = true;
		}
		if(cc.minPriority == 0) {
			msg = msg + "| minPriority must be > 0 |";
			test = true;
        }
        if(test==true){ 
            System.out.println(msg); 
            res = true;
        }
        test = false;
        // Verify Tasks //
		[for (co:Component | comp.eContents(Component))]
		[if (co.name->includes('Sw_Architecture'))]
		[for (c:Component | co.eContents(Component))]
		[for (str:Stereotype | c.getAppliedStereotypes())]
		cc.tasks.add(new Task("[c.name/]",[c.getValue(str,'wcet')/],[c.getValue(str,'jitter')/],[c.getValue(str,'priority')/],[c.getValue(str,'period')/],[c.getValue(str,'deadline')/],"[c.getValue(str,'alloc')/]"));
		[/for]
		[/for]
		for(int i = 0; i < cc.tasks.size(); i++) {
		    Task t = cc.tasks.get(i);
		    msg = "For the task "+t.getName()+" : ";
		    if(t.getWcet()==0) {
				msg = msg + "| wcet must be > 0 |";
				test = true;
			}
			if(t.getPeriod()==0) {
				msg = msg + "| period must be > 0 |";
				test = true;
            }
			if(t.getPriority()==0) {
				msg = msg + "| priority must be > 0 |";
				test = true;
            }
            if(t.getDeadline()==0) {
				msg = msg + "| deadline must be > 0 |";
				test = true;
            }
			if(t.getAlloc()=="") {
				msg = msg + "| alloc must not be empty |";
				test = true;
            } 
            if(test==true){ 
                System.out.println(msg); 
                res = true;
            }
            test = false;
        }			
		[/if]
		[/for]	
		[/for]	
		if(res == true){
            System.out.println(""); 
            System.out.println("Result : Your model is Inconsistent");
        }else{
            System.out.println("Result : Your model is Consistent"); 
        }
	}
}
[/for]
[/file]
[/template]