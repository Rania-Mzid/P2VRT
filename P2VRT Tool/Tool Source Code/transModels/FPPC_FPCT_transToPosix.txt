[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public generateElement(m : Model)]
[comment @main/]
[file (m.name, false, 'UTF-8')]
[generate_text_file(m)/]
[/file]
[/template]

[template public generate_text_file(m : Model)]
[file ('FPPC_FPCT_Posix.c',false)]
#include <stdio.h>
#include <pthread.h>
#include <time.h>
#include <unistd.h>
#include <semaphore.h>

struct timespec global;
typedef struct Task { double wcet; struct timespec period; char message['[50]'/]; } tache;
sem_t evt1;

[for (comp:Component | m.eContents(Component))]
[for (co:Component | comp.eContents(Component))]
[if (co.name->includes('Sw_Architecture'))]
[for (c:Component | co.eContents(Component))]
[for (str:Stereotype | c.getAppliedStereotypes())]
[for (p:Port | c.eContents(Port))]
[if (p.name.startsWith('In'))]
void* [c.name/]func(tache *task){	
    tache tt = *task;
    while(global.tv_sec + (int) tt.wcet <= tt.period.tv_sec){
        sleep((int) tt.wcet);
        global.tv_sec = global.tv_sec + (int) tt.wcet;
        printf("[c.name/]  = %d \n",(int)global.tv_sec);
		[for (str:Stereotype | c.getAppliedStereotypes())]
		[if (p.name.endsWith('message'))]
		printf("Message envoyer par [c.name/] = %d \n",(int)global.tv_sec);
		[/if]
		[/for]
        sem_post(&evt1);
    }
}
[/if]

[if (p.name.size()=2 or (not p.name.endsWith('message') and p.name.contains('message')) or p.name.endsWith('out'))]
void* [c.name/]func(tache *task){	
	sem_wait(&evt1); 
    tache tt = *task;
    while(global.tv_sec + (int) tt.wcet <= tt.period.tv_sec){
        sleep((int) tt.wcet);
        global.tv_sec = global.tv_sec + (int) tt.wcet;
        printf("[c.name/]  = %d \n",(int)global.tv_sec);
		[for (str:Stereotype | c.getAppliedStereotypes())]
		[if (p.name.endsWith('message'))]
		printf("%d = %d \n",tt.message,(int)global.tv_sec);
		[/if]
		[/for]
        sem_post(&evt1);
    }
}
[/if]
[/for]
[/for]
[/for]

int main(void){
[for (c:Component | co.eContents(Component))]
	pthread_t [c.name/];
[/for]
	struct sched_param param;
    pthread_attr_t attr;
	sem_init(&evt1, 1, 2);

    clock_gettime(CLOCK_REALTIME, &global);
    printf("Debut  = %d \n",(int)global.tv_sec);

	pthread_attr_init(&attr);
[for (str:Stereotype | comp.getAppliedStereotypes())]
    param.sched_priority = [comp.getValue(str,'maxPriority')/];
[/for]
    pthread_setschedparam(pthread_self(), SCHED_FIFO, &param);
    pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);
    pthread_attr_setschedpolicy(&attr, SCHED_FIFO);

    /* -----------------------------Définition des taches----------------------------- */
[for (c:Component | co.eContents(Component))]
[for (str:Stereotype | c.getAppliedStereotypes())]
	param.sched_priority = [c.getValue(str,'priority')/];
    pthread_attr_setschedparam(&attr, &param);
    tache [c.name/]_t; [c.name/]_t.wcet = [c.getValue(str,'wcet')/];
		[for (p:Port | c.eContents(Port))]
		[if (p.name.endsWith('message'))]
	strcpy ([c.name/]_t.message, "Message envoyer par [c.name/]");
		[/if]
		[/for]
    clock_gettime(CLOCK_REALTIME, &[c.name/]_t.period); 
	[c.name/]_t.period.tv_sec = [c.name/]_t.period.tv_sec+(int)[c.getValue(str,'period')/];
    pthread_create(&[c.name/], &attr, [c.name/]func, &[c.name/]_t);
    /* ------------------------------------------------------------------------------- */
[/for]
[/for]

    /* --------------------------------Lancer des taches------------------------------ */
[for (c:Component | co.eContents(Component))]
    pthread_join([c.name/], NULL);
[/for]

 	pthread_attr_destroy(&attr);
    return 0;
}

[/if]
[/for]
[/for]
[/file]
[/template]
