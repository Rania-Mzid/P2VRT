[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public generateElement(m : Model)]
[comment @main/]
[file (m.name, false, 'UTF-8')]
[generate_text_file(m)/]
[/file]
[/template]

[template public generate_text_file(m : Model)]
[comment @main/]
[file ('PUFP_estimatePU.java',false)]
[for (comp:Component | m.eContents(Component))]
[for (str:Stereotype | comp.getAppliedStereotypes())]
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
/* ---------------------- Class Task ----------------------- */
class Task{
    private String name;
	private double wcet;
	private int period;
	private String alloc;
	public Task(String name, double wcet, int period, String alloc){
	    this.name = name;
		this.wcet = wcet;
		this.period = period;
		this.alloc = alloc;
	}
	public String getName() {return this.name;}
	public double getWcet() {return this.wcet;}
	public int getPeriod() {return this.period;}
	public String getAlloc() {return this.alloc;}
}
/* ---------------------- Class Processor ---------------------- */
class Processor{
    private String name;
	public Processor(String name){
	    this.name = name;
	}
	public String getName() {return this.name;}
}
/* -------------------- Class ComputationalModel -------------------- */
public class ComputationalModel{
	private ArrayList<Task> tasks = new ArrayList<>();
	private ArrayList<Processor> processors = new ArrayList<>();
	public ComputationalModel(){}
	public ArrayList<Task> getTasks() {return this.tasks;}
	public ArrayList<Processor> getProcessors() {return this.processors;}
	public static void main(String ['[]'/]args){
		ComputationalModel cc = new ComputationalModel();
        // Add Tasks //
		[for (co:Component | comp.eContents(Component))]
		[if (co.name->includes('Sw_Architecture'))]
		[for (c:Component | co.eContents(Component))]
		[for (str:Stereotype | c.getAppliedStereotypes())]
		cc.tasks.add(new Task("[c.name/]",[c.getValue(str,'wcet')/],[c.getValue(str,'period')/],"[c.getValue(str,'alloc')/]"));
		[/for]
		[/for]
		[/if]
		[/for]
        // Add Processors //
		[for (co:Component | comp.eContents(Component))]
		[if (co.name->includes('Hw_Architecture'))]
		[for (c:Component | co.eContents(Component))]
		[for (str:Stereotype | c.getAppliedStereotypes())]
		[if (str.name->includes('Processor'))]
		cc.processors.add(new Processor("[c.name/]"));
		[/if]
		[/for]
		[/for]
		[/if]
		[/for]
		double PU = 0.0;
		boolean test = false;
		for(int i = 0; i < cc.processors.size(); i++) {
			Processor p = cc.processors.get(i);
	        for(int j = 0; j < cc.tasks.size(); j++) {
			    Task t = cc.tasks.get(j);
	            if(t.getAlloc() == p.getName()) {
	                PU = PU + (t.getWcet() / t.getPeriod());
	            }
	        }
			if(PU > 1){
				System.out.println("Utilization of "+p.getName()+" = "+ PU);
				System.out.println("=> Utilization of "+p.getName()+" > 1");
				System.out.println("");
				System.out.println("Result : Your model is not feasible");
				test = true;
			}else{
			    System.out.println("Utilization of "+p.getName()+" = "+ PU);
			}
			PU = 0.0;
		}
		if (test == false) {
		    System.out.println("=> Utilization of all processors <= 1");
		    System.out.println("");
		    System.out.println("Result : Your model may be feasible");
		}
	}
}
[/for]
[/for]
[/file]
[/template]